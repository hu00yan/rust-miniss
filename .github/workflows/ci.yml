name: CI - Feature Gate & Build Matrix Validation

on:
  push:
    branches:
      - main
      - feat/**
      - feat/http-mvp
      - develop
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test ${{ matrix.os }} - ${{ matrix.backend }}
    runs-on: ${{ matrix.runner }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux + io-uring (native io-uring backend on Linux)
          - os: linux
            backend: io-uring
            runner: ubuntu-latest
            features: "io-uring"
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.backend }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.backend }}-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y liburing-dev build-essential

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: |
        if [ -n "${{ matrix.features }}" ]; then
          cargo clippy --target ${{ matrix.target }} --features "${{ matrix.features }}" -- -D warnings
        else
          cargo clippy --target ${{ matrix.target }} -- -D warnings
        fi

    - name: Build with specific backend
      run: |
        echo "Building for ${{ matrix.os }} with ${{ matrix.backend }} backend"
        if [ -n "${{ matrix.features }}" ]; then
          cargo build --target ${{ matrix.target }} --features "${{ matrix.features }}"
        else
          cargo build --target ${{ matrix.target }}
        fi

    - name: Build with all features
      run: |
        echo "Building with all features for ${{ matrix.backend }} backend validation"
        cargo build --target ${{ matrix.target }} --all-features

    - name: Install nextest
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest

    - name: Run tests with specific backend (nextest)
      run: |
        echo "Running tests for ${{ matrix.backend }} backend"
        if [ -n "${{ matrix.features }}" ]; then
          cargo nextest run --features "${{ matrix.features }}" --profile ci
        else
          cargo nextest run --profile ci
        fi

    - name: Run tests with all features (nextest)
      run: |
        echo "Running all feature tests"
        cargo nextest run --all-features --profile ci

    - name: Run benchmarks
      run: |
        echo "Running criterion benchmarks for ${{ matrix.backend }}"
        if [ -n "${{ matrix.features }}" ]; then
          cargo bench --target ${{ matrix.target }} --features "${{ matrix.features }}" --no-run
        else
          cargo bench --target ${{ matrix.target }} --no-run
        fi

  # Additional job for comprehensive feature combination testing
  feature-combinations:
    name: Feature Combinations Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y liburing-dev build-essential

    - name: Test default features
      run: |
        echo "Testing default feature set"
        cargo check
        cargo test

    - name: Test io-uring feature
      run: |
        echo "Testing io-uring feature"
        cargo check --features io-uring
        cargo test --features io-uring

    - name: Test multicore feature
      run: |
        echo "Testing multicore feature"
        cargo check --features multicore
        cargo test --features multicore

    - name: Test combined features
      run: |
        echo "Testing io-uring with multicore"
        cargo check --features "io-uring,multicore"
        cargo test --features "io-uring,multicore"

    - name: Test all features together
      run: |
        echo "Testing all features combined"
        cargo check --all-features
        cargo test --all-features

  # Performance validation job
  performance:
    name: Performance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y liburing-dev build-essential

    - name: Run criterion benchmarks (io-uring)
      run: |
        echo "Running benchmarks with io-uring backend"
        cargo bench --features io-uring --bench runtime_benchmarks -- --output-format json | tee benchmark_results_iouring.json

    - name: Run criterion benchmarks (all features)
      run: |
        echo "Running benchmarks with all features"
        cargo bench --all-features --bench runtime_benchmarks -- --output-format json | tee benchmark_results_all.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results_*.json
        retention-days: 30

  # Build verification across architectures
  cross-compile:
    name: Cross-compilation Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Cross-compile check
      run: |
        echo "Cross-compiling for ${{ matrix.target }}"
        cross check --target ${{ matrix.target }} --features io-uring
